// DO NOT EDIT.
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: syft_proto/execution/v1/computation_action.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that your are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

struct SyftProto_Execution_V1_ComputationAction {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var command: String {
    get {return _storage._command}
    set {_uniqueStorage()._command = newValue}
  }

  var target: OneOf_Target? {
    get {return _storage._target}
    set {_uniqueStorage()._target = newValue}
  }

  var targetID: SyftProto_Types_Syft_V1_Id {
    get {
      if case .targetID(let v)? = _storage._target {return v}
      return SyftProto_Types_Syft_V1_Id()
    }
    set {_uniqueStorage()._target = .targetID(newValue)}
  }

  var targetPointer: SyftProto_Generic_Pointers_V1_PointerTensor {
    get {
      if case .targetPointer(let v)? = _storage._target {return v}
      return SyftProto_Generic_Pointers_V1_PointerTensor()
    }
    set {_uniqueStorage()._target = .targetPointer(newValue)}
  }

  var targetPlaceholderID: SyftProto_Execution_V1_PlaceholderId {
    get {
      if case .targetPlaceholderID(let v)? = _storage._target {return v}
      return SyftProto_Execution_V1_PlaceholderId()
    }
    set {_uniqueStorage()._target = .targetPlaceholderID(newValue)}
  }

  var targetTensor: SyftProto_Types_Torch_V1_TorchTensor {
    get {
      if case .targetTensor(let v)? = _storage._target {return v}
      return SyftProto_Types_Torch_V1_TorchTensor()
    }
    set {_uniqueStorage()._target = .targetTensor(newValue)}
  }

  var args: [SyftProto_Types_Syft_V1_Arg] {
    get {return _storage._args}
    set {_uniqueStorage()._args = newValue}
  }

  var kwargs: Dictionary<String,SyftProto_Types_Syft_V1_Arg> {
    get {return _storage._kwargs}
    set {_uniqueStorage()._kwargs = newValue}
  }

  var returnIds: [SyftProto_Types_Syft_V1_Id] {
    get {return _storage._returnIds}
    set {_uniqueStorage()._returnIds = newValue}
  }

  var returnPlaceholderIds: [SyftProto_Execution_V1_PlaceholderId] {
    get {return _storage._returnPlaceholderIds}
    set {_uniqueStorage()._returnPlaceholderIds = newValue}
  }

  var unknownFields = SwiftProtobuf.UnknownStorage()

  enum OneOf_Target: Equatable {
    case targetID(SyftProto_Types_Syft_V1_Id)
    case targetPointer(SyftProto_Generic_Pointers_V1_PointerTensor)
    case targetPlaceholderID(SyftProto_Execution_V1_PlaceholderId)
    case targetTensor(SyftProto_Types_Torch_V1_TorchTensor)

  #if !swift(>=4.1)
    static func ==(lhs: SyftProto_Execution_V1_ComputationAction.OneOf_Target, rhs: SyftProto_Execution_V1_ComputationAction.OneOf_Target) -> Bool {
      switch (lhs, rhs) {
      case (.targetID(let l), .targetID(let r)): return l == r
      case (.targetPointer(let l), .targetPointer(let r)): return l == r
      case (.targetPlaceholderID(let l), .targetPlaceholderID(let r)): return l == r
      case (.targetTensor(let l), .targetTensor(let r)): return l == r
      default: return false
      }
    }
  #endif
  }

  init() {}

  fileprivate var _storage = _StorageClass.defaultInstance
}

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "syft_proto.execution.v1"

extension SyftProto_Execution_V1_ComputationAction: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".ComputationAction"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "command"),
    9: .standard(proto: "target_id"),
    2: .standard(proto: "target_pointer"),
    3: .standard(proto: "target_placeholder_id"),
    4: .standard(proto: "target_tensor"),
    5: .same(proto: "args"),
    6: .same(proto: "kwargs"),
    7: .standard(proto: "return_ids"),
    8: .standard(proto: "return_placeholder_ids"),
  ]

  fileprivate class _StorageClass {
    var _command: String = String()
    var _target: SyftProto_Execution_V1_ComputationAction.OneOf_Target?
    var _args: [SyftProto_Types_Syft_V1_Arg] = []
    var _kwargs: Dictionary<String,SyftProto_Types_Syft_V1_Arg> = [:]
    var _returnIds: [SyftProto_Types_Syft_V1_Id] = []
    var _returnPlaceholderIds: [SyftProto_Execution_V1_PlaceholderId] = []

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _command = source._command
      _target = source._target
      _args = source._args
      _kwargs = source._kwargs
      _returnIds = source._returnIds
      _returnPlaceholderIds = source._returnPlaceholderIds
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularStringField(value: &_storage._command)
        case 2:
          var v: SyftProto_Generic_Pointers_V1_PointerTensor?
          if let current = _storage._target {
            try decoder.handleConflictingOneOf()
            if case .targetPointer(let m) = current {v = m}
          }
          try decoder.decodeSingularMessageField(value: &v)
          if let v = v {_storage._target = .targetPointer(v)}
        case 3:
          var v: SyftProto_Execution_V1_PlaceholderId?
          if let current = _storage._target {
            try decoder.handleConflictingOneOf()
            if case .targetPlaceholderID(let m) = current {v = m}
          }
          try decoder.decodeSingularMessageField(value: &v)
          if let v = v {_storage._target = .targetPlaceholderID(v)}
        case 4:
          var v: SyftProto_Types_Torch_V1_TorchTensor?
          if let current = _storage._target {
            try decoder.handleConflictingOneOf()
            if case .targetTensor(let m) = current {v = m}
          }
          try decoder.decodeSingularMessageField(value: &v)
          if let v = v {_storage._target = .targetTensor(v)}
        case 5: try decoder.decodeRepeatedMessageField(value: &_storage._args)
        case 6: try decoder.decodeMapField(fieldType: SwiftProtobuf._ProtobufMessageMap<SwiftProtobuf.ProtobufString,SyftProto_Types_Syft_V1_Arg>.self, value: &_storage._kwargs)
        case 7: try decoder.decodeRepeatedMessageField(value: &_storage._returnIds)
        case 8: try decoder.decodeRepeatedMessageField(value: &_storage._returnPlaceholderIds)
        case 9:
          var v: SyftProto_Types_Syft_V1_Id?
          if let current = _storage._target {
            try decoder.handleConflictingOneOf()
            if case .targetID(let m) = current {v = m}
          }
          try decoder.decodeSingularMessageField(value: &v)
          if let v = v {_storage._target = .targetID(v)}
        default: break
        }
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if !_storage._command.isEmpty {
        try visitor.visitSingularStringField(value: _storage._command, fieldNumber: 1)
      }
      switch _storage._target {
      case .targetPointer(let v)?:
        try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
      case .targetPlaceholderID(let v)?:
        try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
      case .targetTensor(let v)?:
        try visitor.visitSingularMessageField(value: v, fieldNumber: 4)
      case nil: break
      default: break
      }
      if !_storage._args.isEmpty {
        try visitor.visitRepeatedMessageField(value: _storage._args, fieldNumber: 5)
      }
      if !_storage._kwargs.isEmpty {
        try visitor.visitMapField(fieldType: SwiftProtobuf._ProtobufMessageMap<SwiftProtobuf.ProtobufString,SyftProto_Types_Syft_V1_Arg>.self, value: _storage._kwargs, fieldNumber: 6)
      }
      if !_storage._returnIds.isEmpty {
        try visitor.visitRepeatedMessageField(value: _storage._returnIds, fieldNumber: 7)
      }
      if !_storage._returnPlaceholderIds.isEmpty {
        try visitor.visitRepeatedMessageField(value: _storage._returnPlaceholderIds, fieldNumber: 8)
      }
      if case .targetID(let v)? = _storage._target {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 9)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: SyftProto_Execution_V1_ComputationAction, rhs: SyftProto_Execution_V1_ComputationAction) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._command != rhs_storage._command {return false}
        if _storage._target != rhs_storage._target {return false}
        if _storage._args != rhs_storage._args {return false}
        if _storage._kwargs != rhs_storage._kwargs {return false}
        if _storage._returnIds != rhs_storage._returnIds {return false}
        if _storage._returnPlaceholderIds != rhs_storage._returnPlaceholderIds {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
